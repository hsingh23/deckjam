'use strict';
"use babel";

if (location.protocol != 'http:') {
  location.protocol = 'http:';
}
// if ('serviceWorker' in navigator) {
//   navigator.serviceWorker.register('service-worker.js');
// }
// removed service workers and fetch because quizlet does not do cors http://stackoverflow.com/a/34940074 
// no-cors mode won't send authorization header https://developer.mozilla.org/en-US/docs/Web/API/Request/mode
var lo = _;
// var app = angular.module('deckjam', ['ngMaterial', 'angulartics', 'angulartics.google.analytics'])
var app = angular.module('deckjam', ['ngMaterial']).config(function ($mdThemingProvider) {
  var customBlueMap = $mdThemingProvider.extendPalette('light-blue', {
    'contrastDefaultColor': 'light',
    'contrastDarkColors': ['50'],
    '50': 'ffffff'
  });
  $mdThemingProvider.definePalette('customBlue', customBlueMap);
  $mdThemingProvider.theme('default').primaryPalette('customBlue', {
    'default': '500',
    'hue-1': '50'
  }).accentPalette('pink');
  $mdThemingProvider.theme('input', 'default').primaryPalette('grey');
}).controller('homeContainer', ["$scope", "$http", "$mdToast", function (_, $http, $mdToast) {
  _.api = 'http://ayudh.org:3337';
  _.createdOne = localStorage.createdOne && parseInt(localStorage.createdOne) || 0;
  // _.api = 'http://localhost:3337'
  _.getSetsforTerm = function (term) {
    return $http.get(_.api + '/quizlet/search?query=' + term, { cache: true });
  };
  _.getSets = function (sets) {
    return $http.get(_.api + '/quizlet/sets?query=' + sets, { cache: true });
  };
  _.decks = {};
  // _.decks = JSON.parse(localStorage.decks || '{}')
  _.selected = JSON.parse(localStorage.selected || '{}');
  _.selectedOrder = "time";
  _.reverse = true;
  _.md = false;
  _.numSelected = function () {
    return lo.size(_.selected);
  };
  _.numDecks = function () {
    return lo.size(_.decks);
  };
  _.selectedArray = function () {
    return lo.values(_.selected);
  };
  _.selectTerm = function (term, setId) {
    var mouseDown = arguments.length > 2 && arguments[2] !== undefined ? arguments[2] : true;

    term.selected = !!mouseDown ? !!!term.selected : !!term.selected;
    if (term.selected) {
      _.selected[term.id] = lo.assign({}, term);
      _.selected[term.id].setId = setId;
      _.selected[term.id].time = new Date().getTime();
    } else {
      delete _.selected[term.id];
    }
    localStorage.selected = JSON.stringify(_.selected);
  };
  _.removeDeck = function (id) {
    return delete _.decks[id];
  };
  _.selectAll = function (id) {
    if (_.decks[id]) {
      // some unselected, then select all
      if (_.decks[id].terms.find(function (x) {
        return !x.selected;
      })) {
        _.decks[id].terms.forEach(function (term) {
          term.selected = true;
          _.selected[term.id] = lo.assign({}, term);
          _.selected[term.id].setId = id;
          _.selected[term.id].time = new Date().getTime();
        });
      } else {
        // unselect everything
        _.decks[id].terms.forEach(function (term) {
          term.selected = false;
          delete _.selected[term.id];
        });
      }
      localStorage.selected = JSON.stringify(_.selected);
    }
  };
  _.clearSelected = function () {
    _.selected = {};
    localStorage.selected = '{}';
  };
  _.swapSelected = function (id) {
    var _$selected$id = _.selected[id],
        term = _$selected$id.term,
        definition = _$selected$id.definition;

    _.selected[id].definition = term;
    _.selected[id].term = definition;
    localStorage.selected = JSON.stringify(_.selected);
  };
  _.removeSelected = function (id) {
    var _$selected$id2 = _.selected[id],
        setId = _$selected$id2.setId,
        rank = _$selected$id2.rank;

    if (_.decks[setId]) {
      _.decks[setId].terms[rank].selected = false;
    }
    delete _.selected[id];
    localStorage.selected = JSON.stringify(_.selected);
  };
  _.create = function (title) {
    _.url = null;
    _.creating = true;
    $http({
      method: 'POST',
      url: _.api + '/create-set',
      data: JSON.stringify({
        title: title,
        lang_terms: 'en',
        lang_definitions: 'en',
        data: lo.map(_.selected, function (v, k) {
          return lo.pick(v, ['term', 'definition', 'image']);
        })
      })
    }).then(function (res) {
      _.url = 'https://quizlet.com' + res.data.url;
      _.creating = false;
      if (res.data.error) {
        $mdToast.showSimple(res.data.error);
      } else {
        $mdToast.showSimple("Your deck is created");
        _.createdOne += 1;
        localStorage.createdOne = _.createdOne;
      }
    }).catch(function () {
      _.creating = false;
      $mdToast.showSimple("Unable to create deck");
    });
  };
  _.import = function (importUrl) {
    var x = importUrl && importUrl.match(/\d+/);
    x && x[0] && _.getSets(x[0]).then(function (res) {
      res.data.forEach(function (set) {
        set.terms.forEach(function (term) {
          term.selected = true;
          _.selected[term.id] = lo.assign({}, term);
          _.selected[term.id].setId = set.id;
          _.selected[term.id].time = new Date().getTime();
        });
      });
    });
    localStorage.selected = JSON.stringify(_.selected);
  };
  _.getTerms = function (replace) {
    _.decks = !!replace ? {} : _.decks || {};
    _.bloom = !!replace ? new BloomFilter(3e5, 3e-5) : _.bloom || new BloomFilter(3e5, 3e-5);
    _.search.split(',').forEach(function (term) {
      _.getSetsforTerm(term.trim()).then(function (data) {
        _.getSets(data.data.sets.map(function (a) {
          return a.id;
        }).join(',')).then(function (res) {
          res.data.forEach(function (set) {
            var terms = lo.filter(set.terms, function (card) {
              if (_.bloom.test(card.term + card.definition)) {
                return false;
              } else {
                _.bloom.add(card.term + card.definition);
                return true;
              }
            });
            terms.forEach(function (t, i) {
              return t.rank = i;
            });
            if (terms.length > 2) {
              _.decks[set.id] = lo.pick(set, ['url', 'title', 'modified_date', 'lang_terms', 'lang_definitions']);
              _.decks[set.id].terms = terms;
              _.decks[set.id].terms_length = terms.length;
            }
          });
          // localStorage.decks = JSON.stringify(_.decks)
        });
      });
    });
  };
}]);

//# sourceMappingURL=data:application/json;base64,
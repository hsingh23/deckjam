'use strict';
"use babel";

if (location.protocol != 'http:') {
  location.protocol = 'http:';
}
// if ('serviceWorker' in navigator) {
//   navigator.serviceWorker.register('service-worker.js');
// }
// removed service workers and fetch because quizlet does not do cors http://stackoverflow.com/a/34940074 
// no-cors mode won't send authorization header https://developer.mozilla.org/en-US/docs/Web/API/Request/mode
var lo = _;
// var app = angular.module('deckjam', ['ngMaterial'])
var app = angular.module('deckjam', ['ngMaterial', 'angulartics', 'angulartics.google.analytics']).config(function ($mdThemingProvider) {
  var customBlueMap = $mdThemingProvider.extendPalette('light-blue', {
    'contrastDefaultColor': 'light',
    'contrastDarkColors': ['50'],
    '50': 'ffffff'
  });
  $mdThemingProvider.definePalette('customBlue', customBlueMap);
  $mdThemingProvider.theme('default').primaryPalette('customBlue', {
    'default': '500',
    'hue-1': '50'
  }).accentPalette('pink');
  $mdThemingProvider.theme('input', 'default').primaryPalette('grey');
}).directive('iconText', function ($mdMedia) {
  return {
    restrict: 'E',
    scope: {
      tip: '@',
      icon: '@',
      style: '@?'
    },
    template: '<md-tooltip style="{{style}}" hide-gt-xs="hide-gt-xs">\n      {{tip}}\n    </md-tooltip>\n    <md-icon hide-gt-xs="hide-gt-xs" class="material-icons" style="{{style}}">\n      {{icon}}\n    </md-icon>\n    <span style="{{style}}" hide-xs>{{tip}}</span>'
  };
}).controller('homeContainer', ["$scope", "$http", "$mdToast", "$mdMedia", function (_, $http, $mdToast, $mdMedia) {
  _.api = 'http://ayudh.org:3337';
  _._sm = function () {
    return !$mdMedia('md');
  };
  _.sm = function () {
    return $mdMedia('md');
  };
  // _.api = 'http://localhost:3337'
  _.createdOne = localStorage.createdOne && parseInt(localStorage.createdOne) || 0;
  _.fetching = false;
  _.getSetsforTerm = function (term) {
    return $http.get(_.api + '/quizlet/search?query=' + term, { cache: true });
  };
  _.getSets = function (sets) {
    return $http.get(_.api + '/quizlet/sets?query=' + sets, { cache: true });
  };
  _.decks = JSON.parse(localStorage.decks || '{}');
  _.selected = JSON.parse(localStorage.selected || '{}');
  _.selectedOrder = "time";
  _.reverse = true;
  _.md = false;
  _.numSelected = function () {
    return lo.size(_.selected);
  };
  _.numDecks = function () {
    return lo.size(_.decks);
  };
  _.selectedArray = function () {
    return lo.values(_.selected);
  };
  _.startIndexes = {};
  function selectTerm(term, setId) {
    if (term.selected) {
      _.selected[term.id] = lo.assign({}, term);
      _.selected[term.id].setId = setId;
      _.selected[term.id].time = new Date().getTime();
    } else {
      delete _.selected[term.id];
    }
    localStorage.selected = JSON.stringify(_.selected);
  }
  _.selectClickTerm = function (term, setId) {
    // checkbox check in small, whole rows checks >sm
    if (!$mdMedia('md')) {
      term.selected = !term.selected;
      selectTerm(term, setId);
    }
  };
  _.selectDragTerm = function (term, setId) {
    var mouseDown = arguments.length > 2 && arguments[2] !== undefined ? arguments[2] : true;

    // checkbox check in small, whole rows checks >sm
    if ($mdMedia('md')) {
      term.selected = mouseDown ? !term.selected : term.selected;
      selectTerm(term, setId);
    }
  };
  _.removeDeck = function (id) {
    return delete _.decks[id];
  };
  _.selectAll = function (id) {
    if (_.decks[id]) {
      // some unselected, then select all
      if (_.decks[id].terms.find(function (x) {
        return !x.selected;
      })) {
        _.decks[id].terms.forEach(function (term) {
          term.selected = true;
          _.selected[term.id] = lo.assign({}, term);
          _.selected[term.id].setId = id;
          _.selected[term.id].time = new Date().getTime();
        });
      } else {
        // unselect everything
        _.decks[id].terms.forEach(function (term) {
          term.selected = false;
          delete _.selected[term.id];
        });
      }
      localStorage.selected = JSON.stringify(_.selected);
    }
  };
  _.clearSelected = function () {
    _.selected = {};
    localStorage.selected = '{}';
  };
  _.swapSelected = function (id) {
    var _$selected$id = _.selected[id],
        term = _$selected$id.term,
        definition = _$selected$id.definition;

    _.selected[id].definition = term;
    _.selected[id].term = definition;
    localStorage.selected = JSON.stringify(_.selected);
  };
  _.removeSelected = function (id) {
    var _$selected$id2 = _.selected[id],
        setId = _$selected$id2.setId,
        rank = _$selected$id2.rank;

    if (_.decks[setId]) {
      _.decks[setId].terms[rank].selected = false;
    }
    delete _.selected[id];
    localStorage.selected = JSON.stringify(_.selected);
  };
  _.create = function (title) {
    _.url = null;
    _.creating = true;
    $http({
      method: 'POST',
      url: _.api + '/create-set',
      data: JSON.stringify({
        title: title,
        lang_terms: 'en',
        lang_definitions: 'en',
        data: lo.map(_.selected, function (v, k) {
          return lo.pick(v, ['term', 'definition', 'image']);
        })
      })
    }).then(function (res) {
      _.url = 'https://quizlet.com' + res.data.url;
      _.creating = false;
      if (res.data.error) {
        $mdToast.showSimple(res.data.error);
      } else {
        $mdToast.showSimple("Your deck is created");
        _.createdOne += 1;
        localStorage.createdOne = _.createdOne;
        _.selected_actions = 'home';
      }
    }).catch(function () {
      _.creating = false;
      _.selected_actions = 'home';
      $mdToast.showSimple("Unable to create deck");
    });
  };
  _.import = function (importUrl) {
    _.fetching = true;
    var x = importUrl && importUrl.match(/\d+/);
    x && x[0] && _.getSets(x[0]).then(function (res) {
      _.fetching = false;
      _.selected_actions = 'home';
      res.data.forEach(function (set) {
        set.terms.forEach(function (term) {
          term.selected = true;
          _.selected[term.id] = lo.assign({}, term);
          _.selected[term.id].setId = set.id;
          _.selected[term.id].time = new Date().getTime();
        });
      });
    }).catch(function () {
      _.fetching = false;
      _.selected_actions = 'home';
    });
    localStorage.selected = JSON.stringify(_.selected);
  };
  function getSets(setIds) {
    _.getSets(setIds.map(function (a) {
      return a.id;
    }).join(',')).then(function (res) {
      res.data.forEach(function (set) {
        var terms = lo.filter(set.terms, function (card) {
          if (_.bloom.test(card.term + card.definition)) {
            return false;
          } else {
            _.bloom.add(card.term + card.definition);
            return true;
          }
        });
        terms.forEach(function (t, i) {
          return t.rank = i;
        });
        if (terms.length > 2) {
          _.decks[set.id] = lo.pick(set, ['url', 'title', 'modified_date', 'lang_terms', 'lang_definitions']);
          _.decks[set.id].terms = terms;
          _.decks[set.id].terms_length = terms.length;
        }
      });
      _.fetching = false;
      _.selectedIndex = 0;
      localStorage.decks = JSON.stringify(_.decks);
    }).catch(function () {
      _.fetching = false;
      $mdToast.showSimple("Unable to get terms - try another query");
    });
  }
  _.getTerms = function () {
    var replace = arguments.length > 0 && arguments[0] !== undefined ? arguments[0] : true;
    var replaceBloom = arguments.length > 1 && arguments[1] !== undefined ? arguments[1] : true;

    var startIndex = 0;
    _.fetching = true;
    _.decks = !!replace ? {} : _.decks || {};
    _.bloom = !!replaceBloom ? new BloomFilter(3e5, 3e-5) : _.bloom || new BloomFilter(3e5, 3e-5);
    var term = _.search.trim();
    if (term.length > 2) {
      _.getSetsforTerm(term.trim()).then(function (res) {
        _.startIndexes[term] = _.startIndexes[term] || 0;
        startIndex = _.startIndexes[term];
        getSets(res.data.sets.slice(startIndex, startIndex + 10));
        _.startIndexes[term] = _.startIndexes[term] + 10;
      }).catch(function () {
        _.fetching = false;
        $mdToast.showSimple("Unable to get terms - try another query");
      });
    }
  };
}]);

//# sourceMappingURL=data:application/json;base64,